/**一、创建task主要有3种方法
 * 1）用action或closure创建
 * 2）用 Project.task(String name) 方法来创建
 * 3）用 TaskContainer.create(String name) 方法来创建
 * 二、为task添加Action有2种方法
 * 1）myTask.doLast{}
 * 2)tasks.getByName("myTask") {
 *    doLast {}
 * }
 * 三、自定义task有下列3种方法：
 * 1)直接在脚本中定义DefaultTask的子类，用@TaskAction注解自有逻辑方法
 * 2)在buildSrc下用Groovy类中定义DefaultTask的子类
 * 3)在src/main下用Groovy类定义DefaultTask的子类，需在buildscript中声明其jar包的位置和路径
 * 自定义任务在使用是通常是提供一个增强任务：其type为自定义任务，并在配置中提供自定义任务所需的参数值即可，可以没有Action
 */
import javax.inject.Inject

//创建task------------------------------
//1.标准方法
task myTask {
    group "demo_taskCreate"
    //使用Action创建 , 添加到 Action 列表的头部
    doFirst(new Action<Task>() {
        @Override
        void execute(Task task) {
            println "doFirst(Action<? super Task> action)"
        }
    })

    //使用Closure创建， 添加到 Action 列表的头部
    doFirst {
        println "doFirst(Closure action)"
    }
}

//e.g.
task myTask1_1 {
    group "demo_taskCreate"
    description "$name description"
    doLast {
        println "Action in task1_1"
    }
}

task myTask1_2(group: "demo_taskCreate", description: "task description") doLast {
    println "Action in task1_2"

}

//2.采用 Project.task(String name) 方法来创建
project.task("myTask2").doLast {
    println "Action in task2"
}
myTask2.configure {
    group "demo_taskCreate"
    description "$name description"
}

//3.采用 TaskContainer.create(String name) 方法来创建
project.tasks.create("myTask3_1").doLast {
    println "Action in task3_1"
}

getTasks().create("myTask3_2", {
    group "demo_taskCreate"
    description "$name description"
    setDependsOn(["myTask1_1", "myTask2"])
}).doLast {
    println "This is myTask3_2!!!"
}

//为已有Task添加Action-----------------------
//1.标准方法
myTask1_1.doLast {
    println "hello"
}

//2.采用 TaskContainer获取已有的task名称
tasks.getByName("myTask1_1") {
    doLast {
        println "123456"
    }
}

//自定义Task-----------------

//1）在Script中自定义DefaultTask的子类
class Greetings1 extends DefaultTask {
    String xName = "Gradle"

    @TaskAction
    void myAction1() {
        println "Hello $xName!"
    }

    @TaskAction
    def myAction2() {
        println "Hi $xName!"
    }
}

//1）运行时只需提供参数即可,这种Task也叫增强型Task，它实际执行的是其Type类的内容
task hello1(type: Greetings1, group: "demo_customTask") {
    xName = "Mr. John"
    //这个Action通常不需要
    doLast {
        println "in Greeting1 from script class"
    }
}

//2）buildSrc下用Groovy类中定义DefaultTask的子类
task hello2(type: Greetings2, group: "demo_customTask", dependsOn: hello1) {
    xName = "Mrs. Jessica"
    doLast {
        println "in Greeting2 from buildSrc class"
    }
}

//3）关联在Jar包里实现的任务类
task hello3(type: Greetings3, group: "demo_customTask", dependsOn: hello2) {
    println "hello3"
    xName = "Mr. Tommas"
    doLast {
        println "in Greeting3 from Jar"
    }
}

//将Jar包'greetings.jar'纳入进来一起编译运行
buildscript {
    dependencies {
        classpath fileTree(dir: 'libs', includes: ['greetings.jar'])
    }
}

//Inject
class CustomTask extends DefaultTask {
    final String message
    final int number

    @Inject
    CustomTask(String message, int number) {
        this.message = message
        this.number = number
    }

    @TaskAction
    def excute() {
        println "message=$message  number=$number!"
    }

}

task myInjectTask(type: CustomTask, constructorArgs: ['hello', 42], group: "demo_customTask")


// 定义创建目录的普通方法
def static createDir(fileName) {
    File f = new File(fileName)
    f.mkdirs()
}
// 定义生成Java 项目目录的任务
task createJavaProjectDir {
    doLast {
        def dirList = ['src/main/java', 'src/main/resources', 'src/test/java', 'src/test/resources']
        dirList.each { fileName -> createDir(fileName) }
    }
}

//系统copy的简单用法
task copyDocs(type: Copy) {
    from 'src'
    into 'build/target/doc'
    doLast {
        println "Copy is done!"
    }
}

//task rule
tasks.addRule("Pattern: ping<ID>") { String taskName ->
    println taskName
    if (taskName.startsWith("ping")) {
        task(taskName) {
            doLast {
                println "Pinging: " + taskName
            }
        }
    }
}

task groupPing {
    dependsOn pingServer1, pingServer2
}

//gradle命令行中没有带任务参数时执行该任务
defaultTasks 'myTask'