repositories {
    mavenCentral()
}

dependencies {
    compileClasspath "commons-lang:commons-lang:2.6"
}

sourceSets {
    main {
        java {
            srcDir 'src/java'
            println "SourceDirectorySet name is : $name"
            println output.classesDirs
        }
        resources {
            srcDir 'src/resources'
            println "SourceDirectorySet name is : $name"
        }
    }
}
println sourceSets.main.output.classesDirs

sourceSets {

    custom {
        println "sourceSet name is：$name"
        //if you truly want to override the defaults:
        output.resourcesDir = file('out/bin')
        // Compiled Java classes should use this directory
        java.outputDir = file('out/bin')
        //修改缺省的compileClasspath
        compileClasspath = files("libs")
        compileClasspath.each { println "compileClasspath in sourceSets is: $it.path" }
    }
}
sourceSets.custom.compileClasspath.each { println it.path }

//confguation中的compileClasspath并没有改变
project.configurations.getByName("compileClasspath").each { println "compileClasspath in configuration is: $it.name" }

//显示所有sourceSet名称和路径
sourceSets.all {
    it.compileClasspath.each {
        println "sourceSet name from sourceSets.all is:  $name"
        println it.path
    }
}

task printSourceSetInfo{
    doLast{
        println "=================sourceSets.main.java.srcDirs================="
        sourceSets.main.java.srcDirs.each {println it}
        println "=================sourceSets.main.java.outputDir================="
        println sourceSets.main.java.outputDir
        println "=================sourceSets.main.output.classesDirs================="
        sourceSets.main.output.classesDirs.each {println it}
        println "=================sourceSets.main.compileClasspath================="
        sourceSets.main.compileClasspath.each {println it}
        println "=================sourceSets.main.runtimeClasspath================="
        sourceSets.main.runtimeClasspath.each {println it}
    }
}

//在Task中执行copy、jar等任务
task copyMethod  {
    doLast {
        copy {
            from 'src/main/webapp'
            into 'build/explodedWar'
            include '**/*.html'
            include '**/*.jsp'
        }
    }
}


//创建一个包装器任务，通过改变gradleVersion的值和重新运行该任务可以升级包装器的版本
task myWrapper(type: Wrapper) {
    gradleVersion = '6.0'                            //缺省为当前版本
    distributionType = Wrapper.DistributionType.ALL  //缺省为BIN
    distributionBase="PROJECT"                       //安装gradle的绝对目录，缺省为GRADLE_USER_HOME
    distributionPath="wrapper/dists"                 //安装gradle的相对路径
    //distributionUrl="下载gradle的自定义路径"，缺省为http\://services.gradle.org/distributions/gradle-${gradleVersion}-bin.zip
}


task printSpecInfo{
    doLast{
        println DEFAULT_BUILD_DIR_NAME
        println DEFAULT_BUILD_FILE
        println GRADLE_PROPERTIES
        sourceSets.main.java.srcDirs.each {println it}
        println sourceSets.main.java.outputDir
        sourceSets.main.output.classesDirs.each {println it}
        sourceSets.main.compileClasspath.each {println it}
        sourceSets.main.runtimeClasspath.each {println it}
    }
}

task myConfigure {
    doLast {
        def pos = configure(new java.text.FieldPosition(10)) {
            beginIndex = 1
            endIndex = 5
        }
        println pos.beginIndex
        println pos.endIndex
    }
}

//解析层次化数据的Groovy工具类方法ConfigSlurper
def configFile = file("$rootDir/gradle/config/buildConfig.groovy")
def parsedConfigEnv = new ConfigSlurper('local').parse(configFile.toURI().toURL())
def parsedConfigGen = new ConfigSlurper().parse(configFile.toURI().toURL())
task showConfigInfo {
    doLast {
        println parsedConfigEnv.tomcat.hostname

        println parsedConfigGen.outer.msg
        println parsedConfigGen.outer.inner.msg

        //与Properties互相转换
        java.util.Properties props = new Properties()
        props = parsedConfigGen.toProperties()
        props.each {println it}
        def myconfig = new ConfigSlurper().parse(props)

        // 将config写入文件
        new File("$buildDir/myConfigFile").withWriter { writer ->
            myconfig.writeTo(writer)
        }
    }
}