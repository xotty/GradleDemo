//常规方法：在类中嵌套定义另一个类的方法闭包
class OuterExt {
    String outerName
    String msg
    InnerExt innerExt = new InnerExt()
    /*可选
    void outerName(String name) {
        outerName = name
    }
    void msg(String msg) {
        this.msg = msg
    }*/

    /*创建内部Extension，可选
    void inner(Action<InnerExt> action) {
        action.execute(inner)
    }*/

    //创建内部Extension
    void inner(Closure c) {
        org.gradle.util.ConfigureUtil.configure(c, innerExt)
    }

    String toString() {
        return "OuterExt[ name = ${outerName}, msg = ${msg}] " + innerExt
    }

}

class InnerExt {
    String innerName
    String msg
    //此方法必须有，否则属性赋值时只能用"="
    void innerName(String name) {
        innerName = name
    }
    //此方法必须有，否则属性赋值时只能用"="
    void msg(String msg) {
        this.msg = msg
    }
    String toString() {
        return "InnerExt[ name = ${innerName}, msg = ${msg}]"
    }
}

def outExt = getExtensions().create("outer", OuterExt)
outer {
    outerName "outer"
    msg "this is a outer message."

    inner {
        innerName "inner"
        msg  "This is a inner message."
    }

}

task nestedExtentionExample1  {
    doLast {
        println outExt
        println "outerNmae is ${outExt.outerName}"
        println "innerName is ${outExt.innerExt.innerName}"
    }
}
//简单的方法：嵌套定义
class OuterExt_Other {
    String outerName
    String msg
}
class InnerExt_Other {
    String innerName
    String msg
}
def outExt_other = getExtensions().create("outer_other", OuterExt_Other)
def innerExt_other = outExt_other.getExtensions().create("inner_other", InnerExt_Other)
outer_other {
    outerName "outer_other"
    msg "this is a outer_other message."
    inner_other {
        innerName "inner_other"
        msg  "This is a inner_other message."
    }
}
task nestedExtentionExample2  {
    doLast {
        println "outer_otherNmae is ${outExt_other.outerName}"
        println "inner_otherName is ${innerExt_other.innerName}"
        println "inner_otherName  is ${outExt_other.inner_other.innerName}"
    }
}
