/**Gradle生命周期：初始化-->配置-->执行
 * 1)Intialization:执行init.gradle(配置全局运行环境)和settings.gradle(配置project的层次模块结构)
 * 2)Confgiuration:解析依赖，获取解析后得到的依赖文件，由此确定各Task的执行顺序。所有非task中的语句都在此阶段执行。
 * 3)Excution:按依赖顺序执行task中的doFirst和doLast中的语句，若没有依赖则按字母顺序执行各Task或某一指定Task
 * 系统提供各阶段的监听或回调，以便能在各个阶段进行准备或处理：
 * ------init------
 * 1)befroreSettings
 * 2)settingsEvaluated
 * 3)projectsLoaded
 * ------configure------
 * 4)beforeProject(beforeEvaluate)
 * 5)afterProject(afterEvaluate)
 * 6)projectsEvaluated
 * 7)whenReady
 * ------task excution------
 * 8)beforeExecute
 * 9)beforeActions
 * 10)afterActions
 * 11)afterExecute
 * 12)buildFinished
 */
println ("rootProject config starting......")
println "Build：rootProject：根项目配置开始:rootProject Configuration........"
task showLifecycle(group:'demp_lifecycle') {
    println "Build：rootProject：根项目任务配置：rootProjectTask Configuration in Task........"
    doFirst {
        println "Build：rootProject：执行根项目任务：rootProjectTask  is excuting doFirst......."
    }
    doLast {
        println "Build：rootProject：执行根项目任务：rootProjectTask  is excuting doLast......."
    }
}

println "Build：rootProject：根项目配置结束:rootProject Configuration........"

/**自定义一个监听器*/
class taskWhenreadyListener implements TaskExecutionGraphListener {
    @Override
    void graphPopulated(TaskExecutionGraph taskGraph) {

        for(Task myTask in taskGraph.allTasks)
            println "Build：rootProject：task whenReady！ ${myTask.name} is about to Excute......,TaskExecutionGraphListener.graphPopulated"
    }
}

/**添加一个task执行图的监听器*/
gradle.taskGraph.addTaskExecutionGraphListener(new taskWhenreadyListener())

class buildListener implements BuildListener {

    //这里此方法无效
    @Override
    void beforeSettings(Settings settings) {
        println "Build：rootProject：beforeSettings......,settings Directory is:${settings.settingsDir}"
    }
    //这里此方法无效
    @Override
    void projectsLoaded(org.gradle.api.invocation.Gradle gradle) {
        println "Build：rootProject：projectsLoaded......,project name is:${gradle.rootProject.name}"
    }

    @Override
    void buildFinished(BuildResult result) {
        println "Build：rootProject：buildFinished......,build action is:${result.getAction()}"
    }
    //这里此方法过期失效
    @Override
    void buildStarted(Gradle gradle) {
        println "Build：rootProject：buildStarted......,project name is:${gradle.rootProject.name}"
    }

    //这里此方法无效
    @Override
    void settingsEvaluated(Settings settings) {
        println "Build：rootProject：settingsEvaluated......,settings Directory is:${settings.settingsDir}"
    }

    @Override
    void projectsEvaluated(Gradle gradle) {
        println "Build：rootProject： projectsEvaluated......,current project name is:${gradle.rootProject.name}"
    }
}
gradle.addListener(new buildListener())

class projectEvaluationListener implements ProjectEvaluationListener {
    //仅对子项目有效，对当前项目无效
    void beforeEvaluate(org.gradle.api.Project proj) {
        println "Build：rootProject：执行beforeProject......,current project name is:${proj.name}"
    }
    //对当前项目和子项目均有效
    void afterEvaluate(org.gradle.api.Project proj, org.gradle.api.ProjectState projstate) {
        println "Build：rootProject：执行afterProject.........,current project name is--${proj.name}"
    }
}
gradle.addListener(new projectEvaluationListener())

class taskExecutionListener implements TaskExecutionListener {
    void beforeExecute(org.gradle.api.Task mTask) {
        println "Build：rootProject：TASK：beforeExecute......,task name is:${mTask.name}"
    }

    void afterExecute(org.gradle.api.Task mTask, org.gradle.api.tasks.TaskState mTaskState){
        println "Build：rootProject：TASK：afterExecute......,task name is:${mTask.name}"
    }
}
gradle.addListener(new taskExecutionListener())

class taskActionListener implements TaskActionListener{
    void beforeActions(org.gradle.api.Task mTask) {
        println "Build：rootProject：TASK：beforeActions......,task name is:${mTask.name}"
    }

    void afterActions(org.gradle.api.Task mTask) {
        println "Build：rootProject：TASK：afterActions......,task name is:${mTask.name}"
    }
}
gradle.addListener(new taskActionListener())

