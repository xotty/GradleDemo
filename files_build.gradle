// Using a relative path
File myFile1 = file("src/main/java/mainJava.java")
// Using an absolute path
def myFile2 = file(myFile1.absolutePath)

// Using a File object with a relative path
def myFile3 = new File('src/main/java/mainJava.java')

def paths = sourceSets.main.java.srcDirs.toArray()
File myFile4 = file("${paths[0]}/mainJava.java")

task readfile(group: 'demo_file') {
    doLast {
        println myFile1.text    // 等同于myFile1.getText()

        println myFile2.readLines()

        myFile3.eachLine { line ->
            println line
        }

        myFile4.withInputStream {input ->
            println input.readLines()
        }

        //读取二进制文件（byte）
        def contents = myFile3.bytes
        println contents

        //读取部分内容
        def reader = myFile3.withReader { reader->
                char [] buffer=new char[20]
                reader.read(buffer)
                return buffer
        }
        println reader
    }
}

task writefile(group: 'demo_file') {
    version=1.0
    ext.buildTimestamp = new Date().format('yyyy-MM-dd HH:mm:ss')
    doLast {
        def filePath = "$buildDir/myfile"
        File myfile9 = new File(filePath+"9")
        // 写入文件
        myfile9.write("This is line1")
        myfile9 << "\nThis is line2"
        myfile9.append("\nThis is line3")
       //myfile9.text = "This is line4"  //会覆盖前面的内容
        println myfile9.text

        File myfile8 = new File(filePath+"8")
        myfile8.withWriter {
            out->out.write("This is line in myfile8")
        }
        println myfile8.text

        def myfile7 = new File(filePath+"7")
        Properties props = new Properties()
        props.setProperty('version', project.version.toString())
        props('timestamp',buildTimestamp)
        props.store(myfile7.newWriter(), null)
        println myfile7.text
    }
}



task fileCollection(group: 'demo_file') {
    doLast {
        FileCollection collection= files('src/file1.txt', new File('src/file2.txt'), ['src/file3.txt', 'src/file4.txt'])
        // Convert the collection to various types
        Set set1 = collection.files
        Set set2 = collection as Set
        List list = collection as List
        String path = collection.asPath

        FileCollection singleFileCollection= files('src/file10.txt')
        File mFile = singleFileCollection.singleFile
        println mFile.name

        // Add and subtract collections
        def union = collection + files('src/file5.txt')
        def different = collection - files('src/file3.txt')

       // Iterate over the files in the collection
        collection.each { File file ->
            println file.name
        }

        //files可以接受：FileCollection、Task、TaskOutputs
        File srcDir=file('src/main/groovy')
        // Create a file collection using a closure
        def myFiles = files { srcDir.listFiles() }
        println "Contents of $srcDir.name"
        myFiles.collect { relativePath(it) }.sort().each { println it }
    }
}

task fileTree(group: 'demo_file') {
    doLast {
        FileTree tree = fileTree(dir: 'src/main')

        // Add include and exclude patterns to the tree
        tree.include '**/*.java'
        tree.exclude '**/*3*'

        // Create a tree using path
        def tree1 = fileTree('src').include('**/*.java')

        // Create a tree using closure
        def tree2 = fileTree('src') {
            include '**/*.java'
        }

        // Create a tree using a map
        def tree3 = fileTree(dir: 'src', include: '**/*.java')
        def tree4 = fileTree(dir: 'src', includes: ['**/*.java', '**/*.xml'])
        def tree5 = fileTree(dir: 'src', include: '**/*.java', exclude: '**/*test*/**')

    // Iterate over the contents of a tree
    tree.each {File file ->
        println file
    }

    // Filter a tree
    FileTree filtered = tree.matching {
        include 'org/gradle/api/**'
    }

    // Add trees together
    FileTree sum = tree + fileTree(dir: 'src/test')

    // Visit the elements of the tree
    tree.visit {element ->
        println "$element.relativePath => $element.file"
    }


        // Create a ZIP file tree using path
        FileTree zip = zipTree('someFile.zip')

        // Create a TAR file tree using path
        FileTree tar = tarTree('someFile.tar')

        //tar tree attempts to guess the compression based on the file extension
        //however if you must specify the compression explicitly you can:
        FileTree someTar = tarTree(resources.gzip('someTar.ext'))
    }
}

task copyTask(type: Copy,group:'demo_file') {
    from 'src/main/java'
    into 'build/explodedWar'
}

task copyTaskWithPatterns(type: Copy) {
    from 'src/main/webapp'
    into 'build/explodedWar'
    include '**/*.html'
    include '**/*.jsp'
    exclude { details -> details.file.name.endsWith('.html') && details.file.text.contains('staging') }
}

task anotherCopyTask(type: Copy,group:'demo_file') {
    // Copy everything under src/main/webapp
    from 'src/main/resources'
    // Copy a single file
    from 'src/main/groovy/mainGroovy.groovy'
    // Copy the output of a task
    from copyTask
    // Copy the contents of a Zip file
    from zipTree('src/main/annotations.zip')
    into 'build/distributions'
}

task copyMethodWithExplicitDependencies{
    inputs.file copyTask // up-to-date check for inputs, plus add copyTask as dependency
    outputs.dir 'some-dir' // up-to-date check for outputs
    doLast{
        copy {
            // Copy the output of copyTask
            from copyTask
            into 'some-dir'
        }
    }
}

task nestedSpecs(type: Copy) {
    into 'build/explodedWar'
    exclude '**/*staging*'
    from('src/dist') {
        include '**/*.html'
    }
    into('libs') {
        from configurations.runtime
    }
}

task rename(type: Copy) {
    from 'src/main/webapp'
    into 'build/explodedWar'
    // Use a closure to map the file name
    rename { String fileName ->
        fileName.replace('-staging-', '')
    }
    // Use a regular expression to map the file name
    rename '(.+)-staging-(.+)', '$1$2'
    rename(/(.+)-staging-(.+)/, '$1$2')
}

import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens
task filter(type: Copy) {
    from 'src/main/webapp'
    into 'build/explodedWar'
    // Substitute property references in files
    expand(copyright: '2009', version: '2.3.1')
    expand(project.properties)
    // Use some of the filters provided by Ant
    filter(FixCrLfFilter)
    filter(ReplaceTokens, tokens: [copyright: '2009', version: '2.3.1'])
    // Use a closure to filter each line
    filter { String line ->
        "[$line]"
    }
}

task libs(type: Sync) {
    from configurations.runtime
    into "$buildDir/libs"
}

task myZip(type: Zip, group:'demo_file') {
    archivesBaseName = 'gradle'
    archiveVersion.set('1.0')
    archiveAppendix.set( 'wrapper')
    archiveClassifier.set('src')
    from 'src/main'
    into('libx')
}
